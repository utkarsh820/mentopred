name: Deploy Streamlit App

on:
  push:
    branches: [ main ]  # auto-deploy on push to main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          lfs: true  # ensures DVC files handled properly

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: 'pip'

      - name: Install Poetry
        run: pip install poetry

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create false
          poetry config installer.max-workers 10

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-python3.13-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-poetry-python3.13-

      - name: Update lock file
        run: poetry lock

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Configure DVC and Backblaze
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          B2_ENDPOINT_URL: ${{ secrets.B2_ENDPOINT_URL }}
        run: |
          poetry run dvc remote modify b2remote endpointurl $B2_ENDPOINT_URL
          poetry run dvc pull -r b2remote

      - name: Verify model presence
        run: ls -lh models/ || echo "Model file may be missing but will be downloaded by Streamlit Cloud"

      - name: Deploy to Streamlit Cloud
        run: echo "Ready to deploy via Streamlit Cloud (auto build triggers on push)"
        
      - name: Print deployment success
        run: echo "GitHub Actions workflow completed successfully"